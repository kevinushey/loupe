#!/usr/bin/env bash

# save stty in case things get changed by a tripped up debugger
_stty=$(stty -g)

read -r -d '' USAGE <<- EOF
Usage: $(basename "$0") [-d debugger] [-e expr] [-f file] [-p pid] [-o output]

Use a debugger to attach to an R process, and print the R call stack.

Options:

  -d    Specify the path to the debugger to be used.
  -e    Run an R expression in the requested process.
  -f    Run an R script in the requested process.
  -o    The file where R frames should be saved.
  -p    The process ID to attach to.

EOF

if [ "$#" = "0" ] || [ "$1" = "--help" ]; then
	printf "%s\n\n" "${USAGE}"
	exit 0
fi

realpath () {
	echo "$(cd "$(dirname "$1")"; pwd -P)/$(basename "$1")"
}

while [ "$#" != "0" ]; do

	case "$1" in

	-d) debugger="$2";              shift ;;
	-e) rexpr="$2";                 shift ;;
	-f) rexpr="source(\"$2\")" ;    shift ;;
	-o) rframes=$(realpath "$2") ;  shift ;;
	-p) pid="$2" ;                  shift ;;
	*)  pid="$1" ;

	esac

	shift

done

# figure out debugger to be used
if [ -z "${debugger}" ]; then
	if [ "$(uname)" = "Darwin" ]; then
		debugger=lldb
	else
		debugger=gdb
	fi
fi

if ! command -v "${debugger}" &> /dev/null; then
	echo "error: requested debugger '${debugger}' does not exist"
	exit 1
fi

# if we've been supplied the name of a process,
# rather than a process id, then try to resolve it
pid=${pid:-R}
if ! [ "${pid}" -eq "${pid}" ] 2> /dev/null; then

	_pid="$(pgrep -nx "${pid}")"

	if [ -z "${_pid}" ]; then
		echo "error: could not resolve pid for process '${pid}'"
		exit 1
	fi

	echo "Found process ${pid} with PID ${_pid}"
	pid="${_pid}"

fi

# TODO: we could consider hooking lldb up to an input / output
# socket and keeping lldb and its connection alive for longer

# path for R outputs
rtraceback=${rtraceback:-$(mktemp).log}
rframes=${rframes:-$(mktemp).rds}
renvir="R_GlobalContext->cloenv == R_BaseEnv ? R_GlobalEnv : R_GlobalContext->cloenv"

# if rexpr is still unset, use our default
if [ -z "${rexpr}" ]; then

	# evaluate in new environment, inheritting curent as parent
	renvir="Rf_lang2(Rf_install(\"new.env\"), $renvir)"

	read -r -d '' rexpr <<- EOF
	# print rlang traceback if available
	if ("rlang" %in% loadedNamespaces()) {
		frames <- sys.frames()
		if (length(frames) > 3L) {
			bottom <- frames[[length(frames) - 3L]]
			traceback <- format(rlang::trace_back(0, bottom))
			writeLines(traceback, con = "${rtraceback}")
		}
	}
	
	# dump frames to file
	status <- sys.status()

	# trim off our frames
	offset <- -4L
	for (i in seq_along(status))
		status[[i]] <- utils::head(status[[i]], n = offset)
	
	# save to file
	saveRDS(status, file = "${rframes}", version = 2L)
	EOF

fi

# write R script
rscript="$(mktemp).R"
echo "${rexpr}" > "${rscript}"

lldb-only () {
   case "${debugger}" in
   *lldb) echo "$@" ;;
   esac
}

# write debugger script
dscript=$(mktemp)
cat > "${dscript}" <<- EOF

# disable interrupts
call $(lldb-only int) \$interrupts = R_interrupts_suspended
call R_interrupts_suspended = (Rboolean) 1

# disable debugger
call $(lldb-only int) \$globaldebug = RDEBUG(R_GlobalEnv)
call SET_RDEBUG(R_GlobalEnv, 0)

call $(lldb-only int) \$basedebug = RDEBUG(R_BaseEnv)
call SET_RDEBUG(R_BaseEnv, 0)

# disable garbage collector
call $(lldb-only int) \$gc = R_GCEnabled
call R_GCEnabled = 0

# create path to script as string
call $(lldb-only SEXP) \$script = Rf_protect(Rf_mkString("${rscript}"))

# create call
call $(lldb-only SEXP) \$call = Rf_protect(Rf_lang3(Rf_install("sys.source"), \$script, ${renvir}))

# evaluate it
call Rf_eval(\$call, R_BaseEnv)

# unprotect protected objects
call Rf_unprotect(2)

# restore debugger
call SET_RDEBUG(R_GlobalEnv, \$globaldebug)
call SET_RDEBUG(R_BaseEnv, \$basedebug)

# restore interrupts
call R_interrupts_suspended = (Rboolean) \$interrupts

# restore garbage collection
call R_GCEnabled = \$gc
EOF

doutput=$(mktemp)

lldb-command () {
   "${debugger}" --batch --attach-pid "${pid}" --source "${dscript}" &> "${doutput}"
}

gdb-command () {
   "${debugger}" -batch -p "${pid}" -x "${dscript}" &> "${doutput}"
}

printf "%s" "Attaching debugger ... "

case "${debugger}" in
*gdb)  eval "$(gdb-command)";  ec=$? ;;
*lldb) eval "$(lldb-command)"; ec=$? ;;
esac

if [ "${ec}" != "0" ]; then
	cat "${doutput}"
	echo "ERROR: ${debugger} had status code ${ec}"
	exit 1
fi

printf "%s\n" "Done!"

if [ -f "${rtraceback}" ]; then
	echo ""
	echo -e "\033[1m\033[34m==>\033[0m \033[1mTraceback (most recent calls last)\033[0m"
	cat "${rtraceback}"
	echo ""
fi

if [ -f "${rframes}" ]; then
	echo "R frames dumped to '${rframes}'."
fi

# restore stty settings
stty "${_stty}"

